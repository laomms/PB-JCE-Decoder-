using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace PB__Decoder_Demo
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
		}

        [Obsolete]
        private void button1_Click(object sender, EventArgs e)
        {

			var BytesIn = HexStrToByteArray(RichTextBox1.Text.Replace(" ", ""));
			if (BytesIn !=null)
            {
				ProtoBuff.TreeNodeStruct NodeStruct = new ProtoBuff.TreeNodeStruct();
				NodeStruct.NodeList = new List<TreeNode>();
				NodeStruct.parentNode = new TreeNode("Proto");
				NodeStruct.NodeList.Add(NodeStruct.parentNode);
				TreeView1.Nodes.Clear();
				NodeStruct = ProtoBuff.QuickDecodeProto(BytesIn, "", NodeStruct);
				TreeView1.Nodes.AddRange(NodeStruct.NodeList.ToArray());
				TreeView1.ExpandAll();
			}			
		}
				public byte[] HexStrToByteArray(string str)
		{
			try
			{
				Dictionary<string, byte> hexindex = new Dictionary<string, byte>();
				for (int i = 0; i <= 255; i++)
				{
					hexindex.Add(i.ToString("X2"), (byte)i);
				}
				if (str.Length % 2 == 1)
				{
					str = "0" + str;
				}
				List<byte> hexres = new List<byte>();
				for (int i = 0; i < str.Length; i += 2)
				{
					hexres.Add(hexindex[str.Substring(i, 2)]);
				}
				return hexres.ToArray();
			}
			catch (Exception ex)
			{

			}
			return null;
		}

        private void Form1_Load(object sender, EventArgs e)
        {
			RichTextBox1.Text
		}
	}


}
